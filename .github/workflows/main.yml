name: Deploy API and Dashboard

on:
    # Trigger the workflow on push
    push:
        branches: 
            # Push events on main branch
            - main

# The Job defines a series of series that execute on the same runner
jobs: 

    CI: 
        # Define the runner used in the workflow
        runs-on: ubuntu-latest
        steps:
            # Check out repo so our workflow can access it
            - uses: actions/checkout@v2

            # Step-1 Set up Python
            - name: Set up Python
                # This action sets up a Python environment for use in actions
              uses: actions/setup-python@v2
              with: 
                python-version: 3.11

            # Step-2 Install Python virtual environment (EV)
            - name: Install Python virtual environment
              run: pip3 install virtualenv

            # Step-3 Setup Virtual ENV
            # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows
            - name: Virtual ENV
              uses: actions/cache@v2
              id: cache-venv # name for referring later
              with:
                path: vevn # what we cache: the Virtual ENV
                # The cache key depends on requirements.txt
                key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
                restore-keys: /
                    ${{ runner.os }}-venv-

            # Step-4 Build a Virtual ENV, but only if it doesn't already exist
            - name: Activate Virtual ENV
              run: python -m venv venv && source venv/bin/activate && pip3 install -r requirements.txt

            # Run tests
            - name: Run Tests
              # Note that you have to activate the virtualenv in every step
              # because GitHub actions doesn't preserve the environment
              run: . venv/bin/activate && pytest

    CD: 
      runs-on: ubuntu-latest
      needs: [CI]
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      steps: 
          # Check out repo so our workflow can access it
          - uses: actions/checkout@v2

          - name: Set up SSH Key
            env: 
              AWS_SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
            run: |
              echo "$AWS_SSH_PRIVATE_KEY" > ssh_key.pem 
              chmod 400 ssh_key.pem
              mkdir -p ~/.ssh
              echo -e "Host *\n  StrictHostKeyChecking no\n" > ~/.ssh/config  

          - name: Transfer file to EC2
            run: | 
              scp -i ssh_key.pem -r data/ api/ models/ ubuntu@${{ secrets.AWS_PUBLIC_IP_ADDRESS }}:/home/ubuntu/ -v